import streamlit as st
import pandas as pd
import numpy as np
import requests
import matplotlib.pyplot as plt
import plotly.express as px
from multiprocessing import Pool
import time

@st.cache_data
def load_data():
    data = pd.read_csv('temperature_data.csv')
    data['timestamp'] = pd.to_datetime(data['timestamp'])
    return data

def calculate_rolling_stats(data):
    data['rolling_mean'] = data.groupby('city')['temperature'].transform(lambda x: x.rolling(window=30).mean())
    data['rolling_std'] = data.groupby('city')['temperature'].transform(lambda x: x.rolling(window=30).std())
    data['anomaly'] = (data['temperature'] < (data['rolling_mean'] - 2 * data['rolling_std'])) | (data['temperature'] > (data['rolling_mean'] + 2 * data['rolling_std']))
    return data

def get_current_temperature(api_key, city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data['main']['temp']
    else:
        error_message = response.json().get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        if response.status_code == 401:
            st.error(f"–û—à–∏–±–∫–∞: {error_message}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.")
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {response.status_code} - {error_message}")
        return None

async def get_current_temperature_async(api_key, city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                return data['main']['temp']
            else:
                error_message = (await response.json()).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {response.status} - {error_message}")
                return None

def main():
    st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", layout="wide")
    st.title("üå°Ô∏è –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

    data = load_data()

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ csv", type="csv")
    if uploaded_file is not None:
        data = pd.read_csv(uploaded_file)
        data['timestamp'] = pd.to_datetime(data['timestamp'])

    data = calculate_rolling_stats(data)

    city = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥", data['city'].unique())

    api_key = st.text_input("–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenWeatherMap")

    if api_key:
        if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)"):
            start_time = time.time()
            current_temp = get_current_temperature(api_key, city)
            end_time = time.time()
            st.write(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
            if current_temp is not None:
                st.write(f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city}: {current_temp}¬∞C")

                season_data = data[(data['city'] == city) & (data['season'] == data[data['city'] == city]['season'].iloc[-1])]
                mean_temp = season_data['temperature'].mean()
                std_temp = season_data['temperature'].std()

                if (current_temp < mean_temp - 2 * std_temp) or (current_temp > mean_temp + 2 * std_temp):
                    st.error("–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è –∞–Ω–æ–º–∞–ª—å–Ω–æ–π.")
                else:
                    st.success("–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã.")

    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä"):
        city_data = data[data['city'] == city]
        fig = px.line(city_data, x='timestamp', y='temperature', title=f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city}")
        fig.add_scatter(x=city_data['timestamp'], y=city_data['rolling_mean'], mode='lines', name='–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ')
        fig.add_scatter(x=city_data[city_data['anomaly']]['timestamp'], y=city_data[city_data['anomaly']]['temperature'], mode='markers', name='–ê–Ω–æ–º–∞–ª–∏–∏', marker=dict(color='red'))
        st.plotly_chart(fig, use_container_width=True)

    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏"):
        season_data = data[data['city'] == city]
        season_mean = season_data.groupby('season')['temperature'].mean().reset_index()
        season_std = season_data.groupby('season')['temperature'].std().reset_index()

        fig = px.bar(season_mean, x='season', y='temperature', error_y=season_std['temperature'], title=f"–°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –≤ {city}")
        st.plotly_chart(fig, use_container_width=True)

    if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"):
        city_data = data[data['city'] == city]
        st.write(city_data['temperature'].describe())

if __name__ == "__main__":
    main()
